AWSTemplateFormatVersion : '2010-09-09'

Parameters:
  Project:
    Type: String
    Default: 'webapp'
  EC2KeyName:
    Type: String
    Default: mauri2020
  DeploymentBucket:
    Type: String
    Default: maudeployments
  DeploymentS3Key:
    Type: String
    Default: "codedeploy/app.zip"
  PublicSubnet1:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/Subnets/PublicSubnet1'
  PublicSubnet2:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/Subnets/PublicSubnet2'
  PublicSubnet3:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/Subnets/PublicSubnet3'
  VPC:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/VPC/Id'
Mappings: 
  RegionMap: 
    us-east-1:
      ami: ami-08f3d892de259504d
    us-east-2:
      ami: ami-0bdcc6c05dec346bf
    us-west-1:
      ami: ami-01311df3780ebd33e
    us-west-2:
      ami: ami-0b1e2eeb33ce3d66f
  # add more regions if need it

Resources:
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: LoadBalancer Security Group
      GroupName: !Join [ "-", [ !Ref Project, "lb-sg" ] ]
      SecurityGroupEgress: 
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Used for webservers
      GroupName: !Join [ "-", [ !Ref Project, "web-server-sg" ] ]
      SecurityGroupEgress: 
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  InstanceProfileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ "-", [ !Ref Project, "instance-profile-role",  !Ref "AWS::Region"] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Policies:
        - PolicyName: codedeploy-instance-access-to-s3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - "arn:aws:s3:::maudeployments/*"
                  - "arn:aws:s3:::aws-codedeploy-us-east-2/*"
                  - "arn:aws:s3:::aws-codedeploy-us-east-1/*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - !Ref InstanceProfileRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Join [ "-", [ !Ref Project, "template" ] ]
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", ami]
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        InstanceType: t2.micro
        KeyName: !Ref EC2KeyName
        SecurityGroupIds:
          - !Ref WebServerSG
        UserData:
          Fn::Base64: |
            #!/bin/bash -x
            exec > /tmp/part-001.log 2>&1
            sudo yum update -y
            ### CODEDEPLOY
            sudo yum install ruby
            sudo yum install wget
            cd /home/ec2-user
            wget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            ### APPLICATION
            sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 3000
            
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Join [ "-", [ !Ref Project, "elb" ] ]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSG
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Name: !Join [ "-", [ !Ref Project, "tg" ] ]
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
          

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join [ "-", [ !Ref Project, "asg" ] ]
      MaxSize: 6
      MinSize: 2
      DesiredCapacity: 3
      AvailabilityZones:
        - !Join [ "", [ !Ref "AWS::Region", "a" ] ]
        - !Join [ "", [ !Ref "AWS::Region", "b" ] ]
        - !Join [ "", [ !Ref "AWS::Region", "c" ] ]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      TargetGroupARNs:
        - !Ref TargetGroup

  AutoScalingGroupParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/WebAppDeployment/AutoScalingGroup'
      Type: String
      Value: !Ref AutoScalingGroup

  TargetGroupNameParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/WebAppDeployment/TargetGroupName'
      Type: String
      Value: !GetAtt TargetGroup.TargetGroupName

Outputs:
  ApplicationEndpoint:
    Description: Application Endpoint
    Value: !GetAtt LoadBalancer.DNSName
